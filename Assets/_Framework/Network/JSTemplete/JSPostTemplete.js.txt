/*
*  -------- Example Cloud Code Script --------
*  Roll a 6-sided dice and get back the result
* --------------------------------------------
*/

/*
* Include the lodash module for convenient functions such as "random"
*  Check https://docs.unity.com/cloud-code/manual/scripts/reference/available-libraries
*  to get a full list of libraries you can import in Cloud Code
*/
const _ = require("lodash-4.17");
const { DataApi } = require("@unity-services/cloud-save-1.4");

/*
 * CommonJS wrapper for the script. It receives a single argument, which can be destructured into:
 *  - params: Object containing the parameters provided to the script, accessible as object properties
 *  - context: Object containing the projectId, environmentId, environmentName, playerId and accessToken properties.
 *  - logger: Logging client for the script. Provides debug(), info(), warning() and error() log levels.
 */
module.exports = async ({ params, context, logger }) => {
    // Log an info message with the parameters provided to the script and the invocation context
    const { projectId, playerId, accessToken } = context;
    const cloudSaveApi = new DataApi(context);

    const UDID = params["UDID"];

    await cloudSaveApi.setItemBatch(projectId, UDID, {
        data: [
            (Fields)
        ]
    });
    var result = await cloudSaveApi.getItems(projectId, UDID);
    var error = MakeErrorData(result.data.results);
    var data = MakeData(result.data.results);
    return parseJson(error, data);
};

module.exports.params =
{
    (params)
};

function MakeErrorData(data) {
    var ret = `
  "error": "${data.length == 0 ? "Not Found Data" : ""}",
  "code": ${data.length > 0 ? 0 : 400}`;
    return ret;
}

function MakeData(data) {
    var ret =
        `  "data": [{
`;
    for (var i = 0; i < data.length; i++) {
        ret += `"${data[i].key}" : ${JSON.stringify(data[i].value)}${i < data.length - 1 ? "," : ""}
    `;
    }
    ret += `  }]`;
    return ret;
}

function parseJson(error, data, logger) {
    var ret = `
{
  ${error}${data.length > 0 ? "," : ""}
  ${data}
}`
    logger.info(ret);
    return JSON.parse(ret);
}